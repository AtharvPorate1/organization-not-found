// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                String    @id @default(uuid())
  email             String    @unique
  name              String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  clerkId           String?   @unique
  Ideas             Project[] @relation("Creator")
  Contributions     Project[] @relation("Contributor")
  Personal_Projects POW[]     @relation("Personal")
  Bio               String?
  Resume            String?
  Socials           Social[]
  Comment           Comment[]
  Reply             Reply[]

  @@index([clerkId], name: "unique_clerkId")
}

model Project {
  id           String    @id @default(uuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  name         String
  description  String
  creator      User      @relation("Creator", fields: [creatorId], references: [id])
  creatorId    String
  contributors User[]    @relation("Contributor")
  status       String
  likes        Int
  comments     Comment[]
  url          String
  POW          POW[]
}

model Comment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  content   String
  likes     Int
  replies   Reply[]

  @@index([projectId], name: "idx_projectId")
  @@index([authorId], name: "idx_authorId")
}

model Reply {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId String
  content   String
  likes     Int
}

model POW {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation("Personal", fields: [userId], references: [id])
  userId    String
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  link      String
}

model Social {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  link      String
}
